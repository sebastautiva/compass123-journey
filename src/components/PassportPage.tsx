import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { format } from 'date-fns';
import { 
  BookOpen, 
  MapPin, 
  Calendar as CalendarIcon, 
  Plus, 
  Download, 
  Stamp,
  Award,
  CheckCircle,
  Edit3
} from 'lucide-react';
import { PilgrimPassport, PassportStamp } from '../types/camino';
import { caminoRoutes } from '../data/camino-routes';
import { useToast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

export const PassportPage: React.FC = () => {
  const { toast } = useToast();
  const [passport, setPassport] = useState<PilgrimPassport | null>(null);
  const [isCreating, setIsCreating] = useState(false);
  const [newPassport, setNewPassport] = useState({
    pilgramName: '',
    route: '',
    startDate: ''
  });
  const [newStamp, setNewStamp] = useState({
    stageId: '',
    stageName: '',
    location: '',
    date: '',
    notes: ''
  });
  const [isAddingStamp, setIsAddingStamp] = useState(false);
  const [selectedDate, setSelectedDate] = useState<Date>();

  useEffect(() => {
    // Load passport from localStorage
    const savedPassport = localStorage.getItem('camino-passport');
    if (savedPassport) {
      setPassport(JSON.parse(savedPassport));
    }
  }, []);

  const handleCreatePassport = () => {
    if (!newPassport.pilgramName || !newPassport.route || !newPassport.startDate) {
      toast({
        title: 'Missing Information',
        description: 'Please fill in all required fields.',
        variant: 'destructive',
      });
      return;
    }

    const passport: PilgrimPassport = {
      id: Date.now().toString(),
      pilgramName: newPassport.pilgramName,
      startDate: newPassport.startDate,
      route: newPassport.route,
      stamps: [],
      notes: [],
      createdAt: new Date().toISOString()
    };

    setPassport(passport);
    localStorage.setItem('camino-passport', JSON.stringify(passport));
    setIsCreating(false);
    setNewPassport({ pilgramName: '', route: '', startDate: '' });
    
    toast({
      title: 'Passport Created!',
      description: 'Your digital pilgrim passport has been created successfully.',
    });
  };

  const handleAddStamp = () => {
    if (!passport) return;
    
    if (!newStamp.stageName || !newStamp.location || !selectedDate) {
      toast({
        title: 'Missing Information',
        description: 'Please fill in all required fields.',
        variant: 'destructive',
      });
      return;
    }

    const stamp: PassportStamp = {
      stageId: newStamp.stageId || Date.now().toString(),
      stageName: newStamp.stageName,
      date: selectedDate.toISOString(),
      location: newStamp.location,
      notes: newStamp.notes
    };

    const updatedPassport = {
      ...passport,
      stamps: [...passport.stamps, stamp]
    };

    setPassport(updatedPassport);
    localStorage.setItem('camino-passport', JSON.stringify(updatedPassport));
    setIsAddingStamp(false);
    setNewStamp({ stageId: '', stageName: '', location: '', date: '', notes: '' });
    setSelectedDate(undefined);
    
    toast({
      title: 'Stamp Added!',
      description: 'Your pilgrim stamp has been added to your passport.',
    });
  };

  const handleExportPassport = () => {
    if (!passport) return;

    const exportData = `
CAMINO PILGRIM PASSPORT
=======================

Pilgrim Name: ${passport.pilgramName}
Route: ${passport.route}
Start Date: ${format(new Date(passport.startDate), 'PP')}
Created: ${format(new Date(passport.createdAt), 'PP')}

STAMPS COLLECTED (${passport.stamps.length})
${'='.repeat(30)}

${passport.stamps.map((stamp, index) => `
${index + 1}. ${stamp.stageName}
   Location: ${stamp.location}
   Date: ${format(new Date(stamp.date), 'PP')}
   ${stamp.notes ? `Notes: ${stamp.notes}` : ''}
`).join('\n')}

${passport.notes.length > 0 ? `
PILGRIM NOTES
=============
${passport.notes.join('\n\n')}
` : ''}

Generated by Camino Companion
${new Date().toLocaleString()}
    `;

    const blob = new Blob([exportData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `camino-passport-${passport.pilgramName.replace(/\s+/g, '-')}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const selectedRoute = caminoRoutes.find(r => r.id === passport?.route);
  const progressPercentage = selectedRoute ? (passport?.stamps.length || 0) / selectedRoute.stages.length * 100 : 0;

  if (!passport) {
    return (
      <div className="space-y-8">
        <div className="text-center space-y-4">
          <h1 className="text-4xl font-playfair font-bold">
            Digital Pilgrim Passport
          </h1>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Create your digital credential to track your Camino journey and collect stamps along the way.
          </p>
        </div>

        <Card className="max-w-2xl mx-auto">
          <CardHeader>
            <CardTitle className="flex items-center">
              <BookOpen className="h-5 w-5 mr-2 text-camino-gold" />
              Create Your Pilgrim Passport
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-4">
              <div>
                <Label htmlFor="name">Pilgrim Name</Label>
                <Input
                  id="name"
                  placeholder="Your full name"
                  value={newPassport.pilgramName}
                  onChange={(e) => setNewPassport(prev => ({ ...prev, pilgramName: e.target.value }))}
                />
              </div>

              <div>
                <Label htmlFor="route">Camino Route</Label>
                <select
                  id="route"
                  value={newPassport.route}
                  onChange={(e) => setNewPassport(prev => ({ ...prev, route: e.target.value }))}
                  className="w-full px-3 py-2 border border-input rounded-md bg-background"
                >
                  <option value="">Select your route</option>
                  {caminoRoutes.map((route) => (
                    <option key={route.id} value={route.id}>
                      {route.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <Label htmlFor="startDate">Start Date</Label>
                <Input
                  id="startDate"
                  type="date"
                  value={newPassport.startDate}
                  onChange={(e) => setNewPassport(prev => ({ ...prev, startDate: e.target.value }))}
                />
              </div>
            </div>

            <Button
              onClick={handleCreatePassport}
              className="w-full bg-camino-gold hover:bg-camino-gold/90 text-camino-gold-foreground"
              disabled={!newPassport.pilgramName || !newPassport.route || !newPassport.startDate}
            >
              <BookOpen className="h-4 w-4 mr-2" />
              Create Passport
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div className="text-center space-y-4">
        <h1 className="text-4xl font-playfair font-bold">
          {passport.pilgramName}'s Pilgrim Passport
        </h1>
        <p className="text-xl text-muted-foreground">
          {passport.route} â€¢ Started {format(new Date(passport.startDate), 'PP')}
        </p>
      </div>

      {/* Progress Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Award className="h-5 w-5 mr-2 text-camino-gold" />
            Journey Progress
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <span className="text-sm text-muted-foreground">
              {passport.stamps.length} stamps collected
            </span>
            <span className="text-sm font-medium">
              {Math.round(progressPercentage)}% complete
            </span>
          </div>
          <Progress value={progressPercentage} className="h-2" />
          {selectedRoute && (
            <p className="text-sm text-muted-foreground">
              {selectedRoute.stages.length - passport.stamps.length} stages remaining
            </p>
          )}
        </CardContent>
      </Card>

      {/* Stamps Section */}
      <div className="grid lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle className="flex items-center">
                <Stamp className="h-5 w-5 mr-2 text-camino-gold" />
                Collected Stamps
              </CardTitle>
              <Button
                onClick={() => setIsAddingStamp(true)}
                size="sm"
                className="bg-camino-gold hover:bg-camino-gold/90 text-camino-gold-foreground"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Stamp
              </Button>
            </CardHeader>
            <CardContent>
              {passport.stamps.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  <Stamp className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>No stamps collected yet</p>
                  <p className="text-sm">Start your journey and collect your first stamp!</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {passport.stamps.map((stamp, index) => (
                    <Card key={index} className="hover-lift">
                      <CardContent className="pt-4">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center mb-2">
                              <CheckCircle className="h-4 w-4 text-green-500 mr-2" />
                              <h4 className="font-semibold">{stamp.stageName}</h4>
                            </div>
                            <p className="text-sm text-muted-foreground mb-1">
                              <MapPin className="h-3 w-3 inline mr-1" />
                              {stamp.location}
                            </p>
                            <p className="text-sm text-muted-foreground mb-2">
                              <CalendarIcon className="h-3 w-3 inline mr-1" />
                              {format(new Date(stamp.date), 'PP')}
                            </p>
                            {stamp.notes && (
                              <p className="text-sm text-muted-foreground italic">
                                "{stamp.notes}"
                              </p>
                            )}
                          </div>
                          <Badge variant="outline" className="ml-4">
                            #{index + 1}
                          </Badge>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Add Stamp Form */}
        <div className="space-y-6">
          {isAddingStamp && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Plus className="h-5 w-5 mr-2 text-camino-gold" />
                  Add New Stamp
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="stageName">Stage Name</Label>
                  <Input
                    id="stageName"
                    placeholder="e.g., Roncesvalles to Zubiri"
                    value={newStamp.stageName}
                    onChange={(e) => setNewStamp(prev => ({ ...prev, stageName: e.target.value }))}
                  />
                </div>

                <div>
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    placeholder="e.g., Zubiri, Spain"
                    value={newStamp.location}
                    onChange={(e) => setNewStamp(prev => ({ ...prev, location: e.target.value }))}
                  />
                </div>

                <div>
                  <Label>Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !selectedDate && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {selectedDate ? format(selectedDate, "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={selectedDate}
                        onSelect={setSelectedDate}
                        initialFocus
                        className="p-3 pointer-events-auto"
                      />
                    </PopoverContent>
                  </Popover>
                </div>

                <div>
                  <Label htmlFor="notes">Notes (Optional)</Label>
                  <Textarea
                    id="notes"
                    placeholder="Add any personal notes about this stage..."
                    value={newStamp.notes}
                    onChange={(e) => setNewStamp(prev => ({ ...prev, notes: e.target.value }))}
                    className="min-h-[80px]"
                  />
                </div>

                <div className="flex gap-2">
                  <Button
                    onClick={handleAddStamp}
                    className="flex-1 bg-camino-gold hover:bg-camino-gold/90 text-camino-gold-foreground"
                  >
                    <Stamp className="h-4 w-4 mr-2" />
                    Add Stamp
                  </Button>
                  <Button
                    onClick={() => setIsAddingStamp(false)}
                    variant="outline"
                    className="flex-1"
                  >
                    Cancel
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Download className="h-5 w-5 mr-2 text-camino-gold" />
                Export Passport
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground mb-4">
                Download your complete passport with all stamps and notes.
              </p>
              <Button
                onClick={handleExportPassport}
                className="w-full"
                variant="outline"
              >
                <Download className="h-4 w-4 mr-2" />
                Export as Text
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};